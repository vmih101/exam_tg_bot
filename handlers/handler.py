from aiogram import Dispatcher, types
from datetime import datetime
from utils import get_picture, rate, btc_rate, receipt, str_for_bot, joke, db1
from globals import bot
from keyboard.user_kb import kb_client, inline_kb


async def send_welcome(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –ø—Ä–æ—Å—Ç–µ–Ω—å–∫–∏–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã. –ù–∏–∂–µ "
                        "–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω —É–º–µ–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å...", reply_markup=kb_client)


async def send_cat(message: types.Message):
    await message.answer(get_picture(), reply_markup=kb_client)


async def send_time(message: types.Message):
    await message.answer(f"–°–µ–π—á–∞—Å {datetime.now().strftime('%H:%M:%S')}", reply_markup=kb_client)


async def send_exchange(message: types.Message):
    await message.answer(f"–ê–∫—Ç—É–ª—å–Ω—ã–π –∫—É—Ä—Å –≤–∞–ª—é—Ç:  –î–æ–ª–ª–∞—Ä –°–®–ê - {rate.get('USD')}, –ï–≤—Ä–æ - {rate.get('EUR')}, "
                        f"–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å - {rate.get('RUB')}", reply_markup=kb_client)


async def send_joke(message: types.Message):
    await message.answer(joke, reply_markup=kb_client)


async def send_btc(message: types.Message):
    await message.answer(f"–ö—É—Ä—Å –±–∏—Ç–∫–æ–∏–Ω–∞ - {btc_rate['price']} –¥–æ–ª–ª–∞—Ä–æ–≤ –°–®–ê", reply_markup=kb_client)


async def send_sticker(message: types.Message):
    await bot.send_sticker(chat_id=message.from_user.id,
                           sticker=r"CAACAgIAAxkBAAEIOPZkGe-Pc0KUIDWHy1AKWX-7MFO7JQACzBQAAgrXyUsa7GgoHs1N_y8E",
                           reply_markup=kb_client)


async def send_receipt(message: types.Message):
    await message.answer(receipt.str_for_bot(), reply_markup=kb_client)


async def send_movies(message: types.Message):
    await message.answer(str_for_bot, reply_markup=kb_client)


async def registration(message: types.Message):
    if (str(message.from_user.id),) not in db1.select_user_id():
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!",
                            db1.insert_user_id(message.from_user.id, datetime.now().strftime('%Y-%m-%d %H:%M:%S')),
                            reply_markup=kb_client)
    else:
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!",
                            reply_markup=kb_client)


async def about(message: types.Message):
    await message.answer("–ï—â—ë —Ä–∞–∑ –ø—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –í–ª–∞–¥ –ú–∏—Ö–∞–π–ª–æ–≤ –∏ —è —è–≤–ª—è—é—Å—å —Å—Ç—É–¥–µ–Ω—Ç–æ–º IT Step –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é "
                         "'Python WEB'. –ù–∏–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–æ–∏ —Å–æ—Ü. —Å–µ—Ç–∏ –¥–ª—è —Å–≤—è–∑–∏ ‚¨áÔ∏è", reply_markup=inline_kb)


def register_user_handlers(dp:Dispatcher):
    dp.register_message_handler(send_welcome, commands=['start', 's'])
    dp.register_message_handler(send_cat, commands=['–°–ª—É—á–∞–π–Ω–æ–µ_—Ñ–æ—Ç–æ_–∫–æ—Ç–∏–∫–∞üò∫', 'cat'])
    dp.register_message_handler(send_time, commands=['–ü–æ–∫–∞–∑–∞—Ç—å_–≤—Ä–µ–º—è‚åö', 'time'])
    dp.register_message_handler(send_exchange, commands=['–ö—É—Ä—Å_–≤–∞–ª—é—Çüíµ', 'course'])
    dp.register_message_handler(send_joke, commands=['–°–ª—É—á–∞–π–Ω–∞—è_—à—É—Ç–∫–∞üòÑ', 'joke'])
    dp.register_message_handler(send_sticker, commands=['–ü–æ–ª—É—á–∏—Ç—å_—Å—Ç–∏–∫–µ—ÄüñºÔ∏è', 'sticker'])
    dp.register_message_handler(send_btc, commands=['–ö—É—Ä—Å_–±–∏—Ç–∫–æ–∏–Ω–∞ü™ôÔ∏è', 'btc'])
    dp.register_message_handler(send_receipt, commands=['–ü—Ä–∏—Å–ª–∞—Ç—å_—Ä–µ—Ü–µ–ø—Çüç≤Ô∏è', 'food'])
    dp.register_message_handler(send_movies, commands=['–¢–æ–ø_—Ñ–∏–ª—å–º–æ–≤üé•', 'movies'])
    dp.register_message_handler(registration, commands=['–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', 'registration'])
    dp.register_message_handler(about, commands=['–û_—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µüë®', 'sw'])




